apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "alumet-relay-client.fullname" . }}

  
spec:
  selector:
    matchLabels:
      name: alumet-relay-client
  template:
    metadata:
      labels:
        name: alumet-relay-client
    spec:
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      #- key: kubernetes.io/hostname
      # operator: Equal
      # value: "hostname"
      # effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: master
        operator: Exists
        effect: NoSchedule

      serviceAccountName: {{ .Release.Name }}-alumet-reader
      automountServiceAccountToken: true

      initContainers:
        - name: wait-for-alumet-server
          image: docker.io/busybox:latest
          command: [
            'sh',
            '-c',
            'until nc -vz {{ .Release.Name }}-alumet-relay-server {{ .Values.global.service.port }}; do echo "Waiting for alumet-relay-server to be running"; sleep 2; done;'
          ]

      containers:
      - name: alumet-relay-client
        image: {{ .Values.global.image.registry }}/alumet-relay-client:0.7.0-alpha-3
        command: ["./alumet-relay-client", "--config", "alumet-agent.toml"]
        imagePullPolicy: Always
        resources:
          limits:
            memory: "{{ .Values.resources.memory }}"
            cpu: "{{ .Values.resources.cpu }}"
        volumeMounts:
          - name: sysfs
            mountPath: /sys
          - name: config
            mountPath: /alumet-agent.toml
            subPath: config

        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: RUST_LOG
            value: "{{ .Values.env.RUST_LOG }}"
          - name: RUST_BACKTRACE
            value: "{{ .Values.env.RUST_BACKTRACE }}"            
#        args: [ "{{ .Values.cmd.Arg1 }}" ]


        securityContext:
          capabilities:
            add: ["SYS_ADMIN", "SYS_NICE"]

      volumes:
        - name: sysfs
          hostPath:
            path: /sys
            type: "Directory"
        
        - name: config
          configMap:
            name: {{ template "alumet-relay-client.fullname" . }}-config
      
      imagePullSecrets:
        - name: {{ .Values.global.secret }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "alumet-relay-client.fullname" . }}-config
data:
  config: |
    max_update_interval = "500ms"

    [plugins.rapl]
    enable = {{ .Values.plugins.rapl.enable }}
    poll_interval = "1s"
    flush_interval = "5s"
    no_perf_events = false
    
    [plugins.perf]
    enable = {{ .Values.plugins.perf.enable }}
    poll_interval = "1s"
    flush_interval = "5s"
    hardware_events = ["REF_CPU_CYCLES", "CACHE_MISSES", "BRANCH_MISSES"]
    software_events = []
    cache_events = ["LL_READ_MISS"]

    [plugins.k8s]
    enable = {{ .Values.plugins.K8s.enable }}
    path = "/sys/fs/cgroup/kubepods.slice/"
    poll_interval = "1s"
    kubernetes_api_url = "https://kubernetes.default.svc:443"
    hostname = "$NODE_NAME"
    token_retrieval = "file"

    [plugins.socket-control]
    socket_path = "alumet-control.sock"

    [plugins.procfs]
    enable = {{ .Values.plugins.procfs.enable }}

    [plugins.relay-client]
    client_name = "alumet-client"
    relay_server = "{{ .Release.Name }}-alumet-relay-server:{{ .Values.global.service.port }}"
    buffer_max_length = 200
    buffer_timeout = "30s"
    
    [plugins.EnergyEstimationTdpPlugin]
    enable = {{ .Values.plugins.EnergyEstimationTdpPlugin.enable }}
    poll_interval = "1s"
    tdp = 100.0
    nb_vcpu = 1.0
    nb_cpu = 1.0

    [plugins.energy-attribution]
    enable = {{ .Values.plugins.energyAttribution.enable }}

    [plugins.procfs.kernel]
    enabled = true
    poll_interval = "5s"

    [plugins.procfs.memory]
    enabled = false
    poll_interval = "5s"
    metrics = ["MemTotal", "MemFree", "MemAvailable", "Cached", "SwapCached", "Active", "Inactive", "Mapped"]

    [plugins.procfs.processes]
    enabled = false
    refresh_interval = "2s"
    strategy = "watcher"

    [[plugins.procfs.processes.groups]]
    exe_regex = ""
    poll_interval = "2s"
    flush_interval = "4s"

    [plugins.procfs.processes.events]
    enable = false
    poll_interval = "1s"
    flush_interval = "4s"
